from jinja2 import Template

#.......................................................................................................
# Простой пример использования шаблонов

name = "Федор"

tm = Template("привет {{name}}") # Вместо определения, которое написано в фигурных скобках, подставляет
# вместо name соответствующее значение, для этого используется метод render класса Template

msg = tm.render(name = name)

print(msg)

# Внутри конструкции {{}} можно использовать:
# {%%} - спецификатор шаблона
# {{}} - выражение для вставки конструкций Python в шаблон
# {##} - блок комментариев
# # ## - строковый комментарий
#.......................................................................................................


#.......................................................................................................
# Пример чуть посложнее с классом

class Person: # Представляем информацию о человеке в виде класса Person
    def __init__(self, name, age):
        self.name = name
        self.age = age

per = Person("Федор", "33") # Создаем экземпляр класса

tm = Template("Мне {{p.age}} лет и зовут меня {{p.name.upper()}}.") # Внутри шаблона можно применять конструкции Python
# p.age и p.name - обращаемся к соответствующему свойству класса Person

msg = tm.render(p=per) # Передаем ссылку на экземплял класса Person

print(msg)
#.......................................................................................................


#.......................................................................................................
# Передаем данные в шаблон, с помощью словаря

per = {'name': 'Федор', 'age': 34}

tm = Template("Мне {{p.age * 2}} лет и зовут меня {{p.name.upper()}}.") # Внутри шаблона можно применять конструкции Python
# p.age и p.name - обращаемся к соответствующему свойству класса Person

msg = tm.render(p=per) # Передаем ссылку на экземплял класса Person

print(msg)
#.......................................................................................................


#.......................................................................................................
# Экранирование
# {% raw %} ... {% endraw %} - позволяет отразить содержимое внутри так, как оно есть

data = '''{% raw %}Модуль Jinjia вместо
определения {{name}}
подставляет соответствующее значение {% endraw %}'''

tm = Template(data)

msg = tm.render(name = 'Федор')

print(msg)
#.......................................................................................................


#.......................................................................................................
# Если мы экранируем html тег, и сохраним его в html файл, то он сработает, для того чтобы этого не происходило
# применяется экранирование флагом
# На html страничке выведется то, что мы записали в link

link = '''В html- документе ссылки определяются так:
<a href="#">Ссылка</a>'''

tm = Template("{{link | e}}")
msg = tm.render(link = link)

print(msg)
#.......................................................................................................


#.......................................................................................................
# {% for <выражение> -%}
#     <повторяемый фрагмент>
# {% endfor %}
# Позволяет формировать список на основе любого итерируемого обьекта

# -% - Что бы не было переноса строк

cities = [{'id': 1, 'city': 'Москва'},
          {'id': 5, 'city': 'Тверь'},
          {'id': 7, 'city': 'Минск'},
          {'id': 8, 'city': 'Смоленск'},
          {'id': 11, 'city': 'Калуга'}]

link = '''<select name="cities">
{% for c in cities -%}
    <option value="{{c['id']}}">{{c['city']}}</option>
{% endfor -%}
</select>'''

tm = Template(link)
msg = tm.render(cities=cities)

print(msg)
#.......................................................................................................


#.......................................................................................................
# {% if  <условие> %}
#     <фрагмент при истинности условия>
# {% endif %}
# Позволяет накладвать условия

# Так же можно использовать:

# {%elif Условие %}
# {%else %}

cities = [{'id': 1, 'city': 'Москва'},
          {'id': 5, 'city': 'Тверь'},
          {'id': 7, 'city': 'Минск'},
          {'id': 8, 'city': 'Смоленск'},
          {'id': 11, 'city': 'Калуга'}]

link = '''<select name="cities">
{% for c in cities -%}
{% if c.id > 6 -%}
    Что угодно {{c['id']}} в индексе {{c['city']}}
{%elif c.city == "Москва" -%}
    Что угодно {{c['city']}}
{%else -%}
    {{c['city']}}
{% endif -%}
{% endfor -%}
</select>'''

tm = Template(link)
msg = tm.render(cities=cities)

print(msg)
#.......................................................................................................


#.......................................................................................................
# Фильтры и макросы: macro, call

# Подробное описание фильтров есть на сайте https://jinja.palletsprojects.com/en/2.11/x/templates/
# sum - вычисление суммы поля коллекции
# min, max - поиск минимального или максимального элемента коллекции
# random - выбираем рандомную запись из коллекции
# replace - заменяем одни символы на другие

# {{ cs | sum(attribute='price') }} - для коллекции cs через | указываем фильтр sum и говорим,
# что нужно производить суммирование по атрибуту price

cars = [
    {'model': 'Ауди', 'price': 23000},
    {'model': 'Шкода', 'price': 17300},
    {'model': 'Вольво', 'price': 44300},
    {'model': 'Фольксваген', 'price': 21300}
]

tpl = "Суммарная цена автомобилей {{ cs | sum(attribute='price') }}"
tpl2 = "Суммарная цена автомобилей {{ (cs | max(attribute = 'price')).model}}"
tpl3 = "Суммарная цена автомобилей {{ cs | random() }}"
tpl4 = "Суммарная цена автомобилей {{ cs | replace('о', 'О') }}"

tm = Template(tpl)
tm2 = Template(tpl2)
tm3 = Template(tpl3)
tm4 = Template(tpl4)

msg = tm.render(cs=cars)
msg2 = tm2.render(cs=cars)
msg3 = tm3.render(cs=cars)
msg4 = tm4.render(cs=cars)

print(msg)
print(msg2)
print(msg3)
print(msg4)
#.......................................................................................................


#.......................................................................................................
# Чтобы использовать фильтр в шаблоне, нужно указать {% filter имя_фильтра %} .... {% endfilter %}

persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

tpl = '''
{%- for u in users -%}
{% filter upper %}{{u.name}}{% endfilter %}
{% endfor -%}
'''

tm = Template(tpl)
msg = tm.render(users=persons)

print(msg)
#.......................................................................................................


#.......................................................................................................
# Макроопределения

# {% macro имя_макро_определения(набор параметров, если несколько, указать через запятую) -%}
#      какое-то действие
# {%- endmacro -%}

html = '''
{% macro input(name, value='', type='text', size=20) -%}
    <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}">
{%- endmacro -%}

{{ input('username') }}
{{ input('email') }}
{{ input('password') }}
'''

tm = Template(html)
msg = tm.render()

print(msg)
# #.......................................................................................................


#.......................................................................................................

#..............................
# {{list_users(users)}} - вызываем макроопределение с параметром users

persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

html = '''
{% macro list_users(list_of_user) -%}
<ul>
{% for u in users %}
    <li>{{u.name}}
{%- endfor %}
</ul>
{%- endmacro %}

{{list_users(users)}}
'''

tm = Template(html)
msg = tm.render(users=persons)

print(msg)
#..............................

# Вложенные массивы - call

# {%call[(параметры)]<вызов макроса>%}
# <вложенный шаблон>
# {%endcall%}

# {{caller(u)}} - связан с вызовом блока call

# list_users(users) - связка call с макрасом list_users(list_of_user)



persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

html = '''
{% macro list_users(list_of_user) -%}
<ul>
{% for u in list_of_user -%}
    <li>{{u.name}} {{caller(u)}}
{%- endfor %}
</ul>
{%- endmacro %}

{% call(user) list_users(users) %}
    <ul>
    <li>age: {{user.old}}
    <li>weight: {{user.weight}}
    </ul>
{% endcall -%}
'''

tm = Template(html)
msg = tm.render(users=persons)

print(msg)
#..............................................................................................


#..............................................................................................
# Загрузчики шаблонов из подкаталога
# FileSystemLoader - загрузчик, который работает с файловой системой компьютера
# get_template - формирует экземплял класса Template

from jinja2 import Environment, FileSystemLoader


persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

file_loader = FileSystemLoader('templates') # Указываем из какого подкаталога будем брать шаблон
env = Environment(loader=file_loader) # Создаем класс окружения, через который происходит работа с пакетом

tm = env.get_template('main.html') # Берем из подкаталога шаблон main.html
msg = tm.render(users=persons)

print(msg)
#..............................................................................................


#..............................................................................................
# Стандартные шаблоны jinja2

# https://jinja.palletsprojects.com/en/2.11.x/api/#jinja2.FileSystemLoader - вся документация по загрузке

# PackageLoader – для загрузки шаблонов из пакета;
# DictLoader – для загрузки шаблонов из словаря;
# FunctionLoader – для загрузки на основе функции;
# PrefixLoader – загрузчик, использующий словарь для построения подкаталогов;
# ChoiceLoader – загрузчик, содержащий список других загрузчиков (если один не сработает, выбирается следующий);
# ModuleLoader – загрузчик для скомпилированных шаблонов.

from jinja2 import Environment, FunctionLoader


persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

def loadTpl(path):
    if path == "index": # Если шаблон принимает значение index
        return '''Имя {{u.name}}, возраст {{u.old}}'''
    else:
        return '''Данные: {{u}}'''


file_loader = FunctionLoader(loadTpl) # Загрузчик на основе функции
env = Environment(loader=file_loader)

tm = env.get_template('index')
msg = tm.render(u=persons[0])
print(msg)
#..............................................................................................


#..............................................................................................
# Конструкции include

# В программе можно просто загрузить шаблон page.htm и получить целиком собранную HTML-страницу:

from jinja2 import Environment, FileSystemLoader


persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

file_loader = FileSystemLoader('templates') # Подключае подкаталог
env = Environment(loader=file_loader)  # Создаем класс окружения, через который происходит работа с пакетом

tm = env.get_template('page.html') # Загружаем шаблон
msg = tm.render()

print(msg)
#..............................................................................................


#..............................................................................................
# Конструкции include

from jinja2 import Environment, FileSystemLoader


persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

file_loader = FileSystemLoader('templates') # Подключае подкаталог
env = Environment(loader=file_loader)  # Создаем класс окружения, через который происходит работа с пакетом

tm = env.get_template('page_new.html')
msg = tm.render(domain='http://proproprogs.ru', title="Про Jinja")

print(msg)
#..............................................................................................


#..............................................................................................
# Конструкция import

from jinja2 import Environment, FileSystemLoader

persons = [
    {"name": "Алексей", "old": 18, "weight": 78.5},
    {"name": "Николай", "old": 28, "weight": 82.3},
    {"name": "Иван", "old": 33, "weight": 94.0}
]

file_loader = FileSystemLoader('templates') # Подключае подкаталог
env = Environment(loader=file_loader)  # Создаем класс окружения, через который происходит работа с пакетом

tm = env.get_template('page_import.html')
msg = tm.render(domain='http://proproprogs.ru', title="Про Jinja")

print(msg)
#..............................................................................................


#..............................................................................................
# Наследование расширение шаблонов

# Используя файловый загрузчик, берем файл шаблона about.htm из подкаталога templates и,
# затем, обрабатываем его с помощью метода render. На выходе получим следующую HTML-страницу.

# Разумеется, если базовый шаблон находится в другом каталоге относительно дочернего about.htm,
# то в инструкции extends это явно нужно прописать, например, так:
# {% extends 'layout/default.tpl' %} в начале файла about.html

# {{self.title()}} - ссылка на содержимое блока title

# {{ super() }} - если нам нужно добавить новую информацию в производном шаблоне к информации блока базового шаблона

# Так же можно делать вложенные блоки, пример в (ex_main)

# {% block table_contents %}{{ super() }}{% endblock %} - добавляем только один - table_contents,
# остальные будут проигнорированы

# {% block item scoped %}{{ u }}{% endblock %} - scoped позволяет брать информацию вне блока,
# так как по умолчанию это недоступно =>

# {% block item %}<p class="item">{{ super() }}</p>{% endblock %} - находится в about,
# мы можем добавить в этот блок то, что было  в дочернем шаблоне

from jinja2 import Environment, FileSystemLoader

list_table = ["Математика", "Физика", "Химия", "Информатика", "Философия"]
file_loader = FileSystemLoader('templates')
env = Environment(loader=file_loader)

template = env.get_template('about.html')

output = template.render(list_table = list_table)
print(output)